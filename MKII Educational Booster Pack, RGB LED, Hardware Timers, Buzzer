/* --COPYRIGHT--,BSD
 * Copyright (c) 2016, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * --/COPYRIGHT--*/
//******************************************************************************
//!
//! LAB 10 Template File - EEL4746
//!
//!  This template will read the X and Y axis from the joystick on the EB
//!  BoosterPack MKII.   The Y-axis value is placed in variable AYresults the
//!  X-axis value is place in variable Vxresults.  Interrupts are used to read
//!  both values.
//!
//!                MSP430F552x
//!             -----------------
//!         /|\|                 |
//!          | |          P6.3/A0|<- VYaxis
//!          --|RST       P6.5/A1|<- VXaxis
//!            |          |
//!            |          |
//!            |                 |Vref is Vcc in all cases
//!
//!
//!
//! This example uses the following interrupt handlers.  To use this example
//! in your own application you must add these interrupt handlers to your
//! vector table.
//! - ADC12_A_VECTOR
//!
//******************************************************************************
#include "driverlib.h"
#include <msp430.h>
#include <stdint.h>
#include <stdio.h>
#include <EEL4746.h>
#define   Num_of_Results   1
#define MYDELAYPERIOD 100000  // Your Delay Count goes here
//Define Global Variables
int8_t vSeq;
volatile uint16_t AXresults;
volatile uint16_t AYresults;
void ADCConfig(void);
extern void ASMMotorDriver(uint8_t);
void myDelay(void);
void CMotorDriver(uint8_t vSeq);
//Main
void main(void)
{
    //Stop Watchdog Timer
    WDT_A_hold(WDT_A_BASE);
    uint16_t CenterValue = 2130 ;     // Center value for AYresults from joystick
    uint8_t NoiseMargin = 213   ;     // Noise Margin which is 10% of center value
    //Configure Joystick
    P6DIR &= ~BIT3;
    P6REN |=  BIT3;
    P6OUT |=  BIT3;
    //Configure Port I/O
    // Configure RGB LED on Education Board and turn OFF LEDS
    P2DIR |= BIT4;    //set port 2 bit 4 as output (Red RGB LED) (set high)
    P1DIR |= BIT5;    //set port 1 bit 5 as output (Green RGB LED) (set high)
    P1DIR |= BIT0;    //Set port 1 bit 0 as output
    P4DIR |= BIT7;    //Set port 4 bit 7 as output
    //Turn ON all four LEDS
    P1OUT |=  BIT0;
    P4OUT |=  BIT7;
    P2OUT |=  BIT4;
    P1OUT |=  BIT5;
    //Hardware Timer Delay of 1 second using EEL4746 funcitons
    myDelay();
    //Turn OFF all four LEDs
    P1OUT &= ~BIT0;
    P4OUT &= ~BIT7;
    P2OUT &= ~BIT4;
    P1OUT &= ~BIT5;
   // Configure ADC
    ADCConfig();
//
// Your code goes here
//
// Define your local variables here
    uint8_t MaxCount = 7;
    //vSeq <- 0
        vSeq = 0;
// Do not remove this statement
    __bis_SR_register(GIE);
//Repeat -- Until Forever Loop
    while(1){
        //Repeat
            //ASMMotorDriver(vSeq)
            ASMMotorDriver(vSeq);
            //Hardware Timer Delay of 1 second
            myDelay();
            //if(AYresults >(CenterValue+NoiseMargin))
            if(AYresults >(CenterValue+NoiseMargin)){
            //then vSeq<- vSeq+1
            vSeq++;
            }
            //if(AYresults >(CenterValue-NoiseMargin))
            if(AYresults <(CenterValue-NoiseMargin)){
            //then vSeq<- vSeq-1
            vSeq--;
                }
            //Check to ensure value of vSeq remains between 0 and 7
            if(vSeq > MaxCount){
            //then vSeq<-0
                vSeq = 0;
            }
            if(vSeq < 0){
                vSeq = 7;
            }
        //Until Forever
printf("AYresults =%d\n", AYresults );
printf("vSeq =%d\n", vSeq);
// Do not remove this statement
    __no_operation();
    }
}
// Define your local functions here
void CMotorDriver(uint8_t vSeq)
{
    switch (vSeq)
    {
    case 0:
        P1OUT |=  BIT0;
        P4OUT &= ~BIT7;
        P2OUT &= ~BIT4;
        P1OUT &= ~BIT5;
        break;
    case 1:
        P1OUT |=  BIT0;
        P4OUT &= ~BIT7;
        P2OUT |=  BIT4;
        P1OUT &= ~BIT5;
        break;
    case 2:
        P1OUT &= ~BIT0;
        P4OUT &= ~BIT7;
        P2OUT |=  BIT4;
        P1OUT &= ~BIT5;
        break;
    case 3:
        P1OUT &= ~BIT0;
        P4OUT |=  BIT7;
        P2OUT |=  BIT4;
        P1OUT &= ~BIT5;
        break;
    case 4:
        P1OUT &= ~BIT0;
        P4OUT |=  BIT7;
        P2OUT &= ~BIT4;
        P1OUT &= ~BIT5;
        break;
    case 5:
        P1OUT &= ~BIT0;
        P4OUT |=  BIT7;
        P2OUT &= ~BIT4;
        P1OUT |=  BIT5;
        break;
    case 6:
        P1OUT &= ~BIT0;
        P4OUT &= ~BIT7;
        P2OUT &= ~BIT4;
        P1OUT |=  BIT5;
        break;
    case 7:
        P1OUT |=  BIT0;
        P4OUT &= ~BIT7;
        P2OUT &= ~BIT4;
        P1OUT |= ~BIT5;
        break;
    default:
        P1OUT &= ~BIT0;
        P4OUT &= ~BIT7;
        P2OUT &= ~BIT4;
        P1OUT &= ~BIT5;
    }
}
// Interrupt service routine for ADC
// Do not remove this code
#pragma vector=ADC12_VECTOR
__interrupt
void ADC12ISR(void)
{
//    static uint16_t index = 0;
    switch(__even_in_range(ADC12IV,34))
    {
    case  0: break;       //Vector  0:  No interrupt
    case  2: break;       //Vector  2:  ADC overflow
    case  4: break;       //Vector  4:  ADC timing overflow
    case  6: break;       //Vector  6:  ADC12IFG0
    case  8:               //Vector  8:  ADC12IFG1
         //Move A3 results, IFG is cleared
        AYresults =
            ADC12_A_getResults(ADC12_A_BASE,
                               ADC12_A_MEMORY_0);
        //Move A5 results, IFG is cleared
        AXresults =
            ADC12_A_getResults(ADC12_A_BASE,
                               ADC12_A_MEMORY_1);
        //Set BREAKPOINT here
        __no_operation();
        break;
    case 10: break;       //Vector 10:  ADC12IFG2
    case 12: break;       //Vector 12:  ADC12IFG3
    case 14: break;       //Vector 14:  ADC12IFG4
    case 16: break;       //Vector 16:  ADC12IFG5
    case 18: break;       //Vector 18:  ADC12IFG6
    case 20: break;       //Vector 20:  ADC12IFG7
    case 22: break;       //Vector 22:  ADC12IFG8
    case 24: break;       //Vector 24:  ADC12IFG9
    case 26: break;       //Vector 26:  ADC12IFG10
    case 28: break;       //Vector 28:  ADC12IFG11
    case 30: break;       //Vector 30:  ADC12IFG12
    case 32: break;       //Vector 32:  ADC12IFG13
    case 34: break;       //Vector 34:  ADC12IFG14
    default: break;
    }
}
//
// Routine to configure ADC
// Do not remove this code
//
void ADCConfig(void){
    // Leave the following code unmodified
        //Enable A/D channel inputs
        GPIO_setAsPeripheralModuleFunctionInputPin(GPIO_PORT_P6,
                                                   GPIO_PIN3 + GPIO_PIN5
                                                   );
        //Initialize the ADC12_A Module
        /*
         * Base address of ADC12_A Module
         * Use internal ADC12_A bit as sample/hold signal to start conversion
         * USE MODOSC 5MHZ Digital Oscillator as clock source
         * Use default clock divider of 1
         */
        ADC12_A_init(ADC12_A_BASE,
                     ADC12_A_SAMPLEHOLDSOURCE_SC,
                     ADC12_A_CLOCKSOURCE_ADC12OSC,
                     ADC12_A_CLOCKDIVIDER_1
                     );
        ADC12_A_enable(ADC12_A_BASE);
        /*
         * Base address of ADC12_A Module
         * For memory buffers 0-7 sample/hold for 256 clock cycles
         * For memory buffers 8-15 sample/hold for 4 clock cycles (default)
         * Enable Multiple Sampling
         */
        ADC12_A_setupSamplingTimer(ADC12_A_BASE,
                                   ADC12_A_CYCLEHOLD_256_CYCLES,
                                   ADC12_A_CYCLEHOLD_4_CYCLES,
                                   ADC12_A_MULTIPLESAMPLESENABLE);
        //Configure Memory Buffers
        /*
         * Base address of the ADC12_A Module
         * Configure memory buffer 0
         * Map input A3 to memory buffer 0
         * Vref+ = AVcc
         * Vref- = AVss
         * Memory buffer 0 is not the end of a sequence
         */
        ADC12_A_configureMemoryParam param0 = {0};
        param0.memoryBufferControlIndex = ADC12_A_MEMORY_0;
        param0.inputSourceSelect = ADC12_A_INPUT_A3;
        param0.positiveRefVoltageSourceSelect = ADC12_A_VREFPOS_AVCC;
        param0.negativeRefVoltageSourceSelect = ADC12_A_VREFNEG_AVSS;
        param0.endOfSequence = ADC12_A_NOTENDOFSEQUENCE;
        ADC12_A_configureMemory(ADC12_A_BASE,&param0);
        /*
         * Base address of the ADC12_A Module
         * Configure memory buffer 1
         * Map input A1 to memory buffer 1
         * Vref+ = AVcc
         * Vref- = AVss
         * Memory buffer 1 is the end of a sequence
         *
         */
        ADC12_A_configureMemoryParam param1 = {0};
        param1.memoryBufferControlIndex = ADC12_A_MEMORY_1;
        param1.inputSourceSelect = ADC12_A_INPUT_A5;
        param1.positiveRefVoltageSourceSelect = ADC12_A_VREFPOS_AVCC;
        param1.negativeRefVoltageSourceSelect = ADC12_A_VREFNEG_AVSS;
        param1.endOfSequence = ADC12_A_ENDOFSEQUENCE;
        ADC12_A_configureMemory(ADC12_A_BASE,&param1);
        //Enable memory buffer 1 interrupt
        ADC12_A_clearInterrupt(ADC12_A_BASE,
                               ADC12IFG1);
        ADC12_A_enableInterrupt(ADC12_A_BASE,
                                ADC12IE1);
        //Enable/Start first sampling and conversion cycle
        /*
         * Base address of ADC12_A Module
         * Start the conversion into memory buffer 0
         * Use the repeated sequence of channels
         */
        ADC12_A_startConversion(ADC12_A_BASE,
                                ADC12_A_MEMORY_0,
                                ADC12_A_REPEATED_SEQOFCHANNELS);
}
void myDelay(void){
    EnableTimer4746(MYDELAYPERIOD);
    while((TA0CTL&TAIFG) == 0);   // Wait for Flag to go high
    DisableTimer4746();
}




//ASM CODE BEGINS HERE

;-------------------------------------------------------------------------------
; MSP430 Assembler Code Template for use with TI Code Composer Studio
;
;
;-------------------------------------------------------------------------------
            .cdecls C,LIST,"msp430.h"       ; Include device header file
           
;-------------------------------------------------------------------------------
            .def    ASMMotorDriver          ; Export program entry-point to
                                            ; make it known to linker.
;-------------------------------------------------------------------------------
            .text                           ; Assemble into program memory.
            .retain                         ; Override ELF conditional linking
                                            ; and retain current section.
            .retainrefs                     ; And retain any sections that have
                                            ; references to current section.
;-------------------------------------------------------------------------------
;-------------------------------------------------------------------------------
; Main loop here
            .newblock
;-------------------------------------------------------------------------------
ASMMotorDriver:
            nop                    ; disable interrupts
            dint                   ; must wrap with nops
            nop
            mov.b R12,&vTemp       ; Copy C parameter into local temp variable
$0:         cmp #0,R12              ; Compare vTemp to 0
            jne $1                 ; if not, check next value
            bisx.b #BIT0,P1OUT         ; Turn ON RED LED on LP
            bicx.b #BIT7,P4OUT         ; Turn OFF GREEN LED on LP
            bicx.b #BIT4,P2OUT        ; Turn OFF RED LED on MK II
            bicx.b #BIT5,P1OUT        ; Turn OFF Green LED on MKII
            jmp done                ; Jump to Return
; Write code here to turn ON/OFF LEDs for vSeq = 1
$1:         cmp #1,R12              ; Compare vTemp to 1
            jne $2                  ; if not check the next value
            bisx.b #BIT0, P1OUT              ;Turn ON RED LED on LP
            bicx.b #BIT7, P4OUT              ;Turn OFF GREEN LED on LP
            bisx.b #BIT4, P2OUT              ;Turn ON RED LED on MK II
            bicx.b #BIT5, P1OUT              ;Turn OFF GREEN LED on MK II
            jmp done                         ;Jump to Return
;  Write similar code all possible values of vSeq
;  last value vSeq should jmp to default
;$2:        cmp #2,R12
;           jne default
; Write code here to turn ON/OFF LEDs for vSeq = 2
$2:         cmp #2,R12              ; Compare vTemp to 1
            jne $3                  ; if not check the next value
            bicx.b #BIT0, P1OUT              ;Turn OFF RED LED on LP
            bicx.b #BIT7, P4OUT              ;Turn OFF GREEN LED on LP
            bisx.b #BIT4, P2OUT              ;Turn ON RED LED on MK II
            bicx.b #BIT5, P1OUT              ;Turn OFF GREEN LED on MK II
            jmp done                         ;Jump to Return
$3:                cmp #3,R12
                   jne $4
            bicx.b #BIT0, P1OUT              ;Turn OFF RED LED on LP
            bisx.b #BIT7, P4OUT              ;Turn ON GREEN LED on LP
            bisx.b #BIT4, P2OUT              ;Turn ON RED LED on MK II
            bicx.b #BIT5, P1OUT              ;Turn OFF GREEN LED on MK II
            jmp done
$4:                cmp #4,R12
                   jne $5
            bicx.b #BIT0, P1OUT              ;Turn OFF RED LED on LP
            bisx.b #BIT7, P4OUT              ;Turn ON GREEN LED on LP
            bicx.b #BIT4, P2OUT              ;Turn OFF RED LED on MK II
            bicx.b #BIT5, P1OUT              ;Turn OFF GREEN LED on MK II
            jmp done
$5:                cmp #5,R12
                   jne $6
            bicx.b #BIT0, P1OUT              ;Turn OFF RED LED on LP
            bisx.b #BIT7, P4OUT              ;Turn ON GREEN LED on LP
            bicx.b #BIT4, P2OUT              ;Turn OFF RED LED on MK II
            bisx.b #BIT5, P1OUT              ;Turn ON GREEN LED on MK II
            jmp done
$6:                cmp #6,R12
                   jne $7
            bicx.b #BIT0, P1OUT              ;Turn OFF RED LED on LP
            bicx.b #BIT7, P4OUT              ;Turn OFF GREEN LED on LP
            bicx.b #BIT4, P2OUT              ;Turn OFF RED LED on MK II
            bisx.b #BIT5, P1OUT              ;Turn ON GREEN LED on MK II
            jmp done
$7:                cmp #7,R12                      ;Compare vTemp to 1
                   jne default                     ;If not jump to default
            bisx.b #BIT0, P1OUT              ;Turn ON RED LED on LP
            bicx.b #BIT7, P4OUT              ;Turn OFF GREEN LED on LP
            bicx.b #BIT4, P2OUT              ;Turn OFF RED LED on MK II
            bisx.b #BIT5, P1OUT              ;Turn ON GREEN LED on MK II
            jmp done
;
; This is the default block to turn OFF all LEDs
;
default:   bicx.b #BIT0,&P1OUT        ; Turn off all LEDS as the default
           bicx.b #BIT7,&P4OUT        ; Turn OFF Green LED on LP
           bicx.b #BIT4,&P2OUT        ; Turn OFF RED LED on MK II
           bicx.b #BIT5,&P1OUT        ; Turn OFF Green LED on MKII
done:      nop                   ; Re-enable interrupts
           eint                  ; must wrap with nops
           nop
           reta                    ; Return from the function
                                           
;-------------------------------------------------------------------------------
; Define your local variables here
; use .space to reserve bytes for local variables.
; an example for vTemp is given
;-------------------------------------------------------------------------------
               .data
vTemp .space 1   ; reserve 1 byte in RAM for a local variable
           

